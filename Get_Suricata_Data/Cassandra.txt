cqsh

>>CREATE KEYSPACE practice WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3} 
>>DESCRIBE KEYSPACES
>>DESCRIBE KEYSPACE practice  or DESCRIBE practice
>>USE practice
>>DESCRIBE TABLES;
>>ALTER KEYSPACE practice WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2} 
>>DROP KEYSPACE practice 


CQL help topics:
================
AGGREGATES               CREATE_KEYSPACE           DROP_TRIGGER      TEXT     
ALTER_KEYSPACE           CREATE_MATERIALIZED_VIEW  DROP_TYPE         TIME     
ALTER_MATERIALIZED_VIEW  CREATE_ROLE               DROP_USER         TIMESTAMP
ALTER_TABLE              CREATE_TABLE              FUNCTIONS         TRUNCATE 
ALTER_TYPE               CREATE_TRIGGER            GRANT             TYPES    
ALTER_USER               CREATE_TYPE               INSERT            UPDATE   
APPLY                    CREATE_USER               INSERT_JSON       USE      
ASCII                    DATE                      INT               UUID     
BATCH                    DELETE                    JSON            
BEGIN                    DROP_AGGREGATE            KEYWORDS        
BLOB                     DROP_COLUMNFAMILY         LIST_PERMISSIONS
BOOLEAN                  DROP_FUNCTION             LIST_ROLES      
COUNTER                  DROP_INDEX                LIST_USERS      
CREATE_AGGREGATE         DROP_KEYSPACE             PERMISSIONS     
CREATE_COLUMNFAMILY      DROP_MATERIALIZED_VIEW    REVOKE          
CREATE_FUNCTION          DROP_ROLE                 SELECT          
CREATE_INDEX             DROP_TABLE                SELECT_JSON  


CREATE TABLE tutorialspoint.emp (
   emp_id int PRIMARY KEY,
   emp_city text,
   emp_name text,
   emp_phone varint,
   emp_sal varint
) 

TRUNCATE TABLE emp

INSERT INTO emp (emp_id, emp_city, emp_name, emp_sal) VALUES (1, 'lhr', 'zulfi', 40000);
INSERT INTO emp (emp_id, emp_city, emp_name, emp_sal) VALUES (2, 'lhr', 'farhan', 30000);
INSERT INTO emp (emp_id, emp_city, emp_name, emp_sal) VALUES (3, 'lhr', 'haseeb', 30000);
INSERT INTO emp (emp_id, emp_city, emp_name, emp_sal) VALUES (4, 'lhr', 'abdlr', 30000);
INSERT INTO emp (emp_id, emp_city, emp_name, emp_sal) VALUES (5, 'mlt', 'abdlr', 30000);
INSERT INTO emp (emp_id, emp_city, emp_name, emp_sal) VALUES (12, 'mlt', 'abdlr', 30000);

delete from emp where emp_id=12 ;

expand on;
select * from emp;


expand off;
select * from emp;

UPDATE emp SET emp_phone = 1234567890 WHERE emp_id = 3;


select * from emp where emp_city='mlt' allow filtering;


select writetime(emp_city) from emp;





--------------------------------------------------------------------------
npm install cassandra-driver

CREATE TABLE mykeyspace.suricata_data_logs (
    timestamp text,
    flow_id bigint,
    in_iface text,
    event_type text,
    src_ip text,
    src_port int,
    dest_ip text,
    dest_port int,
    proto text,
    app_proto text,
    flow frozen<map<text, text>>,
    stats text,
    PRIMARY KEY (timestamp, flow_id)
) WITH CLUSTERING ORDER BY (flow_id ASC);


ALTER TABLE mykeyspace.suricata_data_logs ADD stats text;

adds 9223 data

code 

const fs = require('fs');
const path = require('path');
const { Client } = require('cassandra-driver');

// Set up Cassandra client
const client = new Client({
  contactPoints: ['127.0.0.1'], // Replace with your Cassandra contact points
  localDataCenter: 'datacenter1', // Replace with your Cassandra data center
});

// Connect to Cassandra
client.connect()
  .then(() => {
    console.log('Connected to Cassandra');

    // Read JSON file and insert data into Cassandra
    const filePath = '/var/log/suricata/eve.json'; // Replace with your Suricata log file path
    const readStream = fs.createReadStream(filePath, { encoding: 'utf8' });
    let data = '';
    readStream.on('data', (chunk) => {
      data += chunk;
      const lines = data.split('\n');
      data = lines.pop();
      const queries = lines.map((line) => {
        const event = JSON.parse(line);
        console.log(event); // Log the event variable to check if it's valid
        const flow = event.flow ? JSON.stringify(event.flow) : null;
        const query = `INSERT INTO mykeyspace.suricata_data  (timestamp, flow_id, in_iface, event_type, src_ip, src_port, dest_ip, dest_port, proto, app_proto, flow) VALUES ('${event.timestamp}', ${event.flow_id}, '${event.in_iface}', '${event.event_type}', '${event.src_ip}', ${event.src_port}, '${event.dest_ip}', ${event.dest_port}, '${event.proto}', '${event.app_proto}', ${flow})`;

        return client.execute(query)
          .then(result => {
            console.log(`Successfully inserted event ${event.timestamp}`);
          })
          .catch(error => {
            console.error(`Failed to insert event ${event.timestamp}: ${error.message}`);
          });
      });
      return Promise.all(queries);
    });
    readStream.on('end', () => {
      console.log('Finished reading JSON file');
    });

  })
  .catch((error) => {
    console.error(`Failed to connect to Cassandra: ${error.message}`);
  });


also in table
CREATE TABLE mykeyspace.suricata_data (
    timestamp text,
    flow_id bigint,
    app_proto text,
    dest_ip text,
    dest_port int,
    event_type text,
    flow text,
    in_iface text,
    proto text,
    src_ip text,
    src_port int,
    stats text,
    PRIMARY KEY (timestamp, flow_id)
) WITH CLUSTERING ORDER BY (flow_id ASC)



